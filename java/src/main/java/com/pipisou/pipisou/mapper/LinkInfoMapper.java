package com.pipisou.pipisou.mapper;

import com.pipisou.pipisou.model.LinkInfo;
import com.pipisou.pipisou.model.LinkInfoExample;
import java.util.List;

import org.apache.ibatis.annotations.*;
import org.apache.ibatis.session.RowBounds;

@Mapper
public interface LinkInfoMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table linkinfo
     *
     * @mbg.generated Thu Oct 03 21:33:11 CST 2019
     */
    long countByExample(LinkInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table linkinfo
     *
     * @mbg.generated Thu Oct 03 21:33:11 CST 2019
     */
    int deleteByExample(LinkInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table linkinfo
     *
     * @mbg.generated Thu Oct 03 21:33:11 CST 2019
     */
    @Delete({
        "delete from linkinfo",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table linkinfo
     *
     * @mbg.generated Thu Oct 03 21:33:11 CST 2019
     */
    @Insert({
        "insert into linkinfo (link_url, link_name, ",
        "link_passwd, link_data, ",
        "size)",
        "values (#{linkUrl,jdbcType=VARCHAR}, #{linkName,jdbcType=VARCHAR}, ",
        "#{linkPasswd,jdbcType=VARCHAR}, #{linkData,jdbcType=VARCHAR}, ",
        "#{size,jdbcType=VARCHAR})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=false, resultType=Integer.class)
    int insert(LinkInfo record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table linkinfo
     *
     * @mbg.generated Thu Oct 03 21:33:11 CST 2019
     */
    int insertSelective(LinkInfo record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table linkinfo
     *
     * @mbg.generated Thu Oct 03 21:33:11 CST 2019
     */
    List<LinkInfo> selectByExampleWithRowbounds(LinkInfoExample example, RowBounds rowBounds);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table linkinfo
     *
     * @mbg.generated Thu Oct 03 21:33:11 CST 2019
     */
    List<LinkInfo> selectByExample(LinkInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table linkinfo
     *
     * @mbg.generated Thu Oct 03 21:33:11 CST 2019
     */
    @Select({
        "select",
        "id, link_url, link_name, link_passwd, link_data, size",
        "from linkinfo",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @ResultMap("com.pipisou.pipisou.mapper.LinkInfoMapper.BaseResultMap")
    LinkInfo selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table linkinfo
     *
     * @mbg.generated Thu Oct 03 21:33:11 CST 2019
     */
    int updateByExampleSelective(@Param("record") LinkInfo record, @Param("example") LinkInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table linkinfo
     *
     * @mbg.generated Thu Oct 03 21:33:11 CST 2019
     */
    int updateByExample(@Param("record") LinkInfo record, @Param("example") LinkInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table linkinfo
     *
     * @mbg.generated Thu Oct 03 21:33:11 CST 2019
     */
    int updateByPrimaryKeySelective(LinkInfo record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table linkinfo
     *
     * @mbg.generated Thu Oct 03 21:33:11 CST 2019
     */
    @Update({
        "update linkinfo",
        "set link_url = #{linkUrl,jdbcType=VARCHAR},",
          "link_name = #{linkName,jdbcType=VARCHAR},",
          "link_passwd = #{linkPasswd,jdbcType=VARCHAR},",
          "link_data = #{linkData,jdbcType=VARCHAR},",
          "size = #{size,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(LinkInfo record);

    @Select({
            "select",
            "link_url, link_name, link_passwd, link_data, size",
            "from linkinfo",
            "where link_name like #{link_name,jdbcType=VARCHAR}"
    })
    List<LinkInfo> findByName(@Param("link_name") String link_name, RowBounds rowBounds);

    @Insert({
        "insert into linkinfo (link_url, link_name, ",
        "link_passwd, link_data)",
        "values (#{linkUrl,jdbcType=VARCHAR}, #{linkName,jdbcType=VARCHAR}, ",
        "#{linkPasswd,jdbcType=VARCHAR}, #{linkData,jdbcType=VARCHAR})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=false, resultType=Integer.class)
    int insertOne(LinkInfo record);

}

